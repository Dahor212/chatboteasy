from fastapi import FastAPI
import json
import os
import logging
import pandas as pd
from fastapi.middleware.cors import CORSMiddleware  # Import pro CORS
from rapidfuzz import process, fuzz

app = FastAPI()

# Nastaven√≠ logov√°n√≠
logging.basicConfig(filename="logs.txt", level=logging.DEBUG, format="%(asctime)s - %(levelname)s - %(message)s")
logging.info("üöÄ Spu≈°tƒõn√≠ aplikace")

# Povolen√≠ CORS
origins = [
    "http://dotazy.wz.cz",  # Povolte dom√©nu, odkud budou p≈ôich√°zet po≈æadavky
    "https://dotazy.wz.cz",
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,  # povolte uveden√© dom√©ny
    allow_credentials=True,
    allow_methods=["*"],  # Povolit v≈°echny metody (GET, POST, atd.)
    allow_headers=["*"],  # Povolit v≈°echny hlaviƒçky
)

# Cesta k JSON souboru (pro Render)
json_path = "Chatbot_zdroj.json"

# Ovƒõ≈ôen√≠, zda soubor existuje a naƒçten√≠ dat
faq_data = []
if os.path.exists(json_path):
    try:
        with open(json_path, "r", encoding="utf-8") as f:
            faq_data = json.load(f)
        logging.info(f"‚úÖ Naƒçteno {len(faq_data)} z√°znam≈Ø z JSON souboru.")
    except Exception as e:
        logging.error(f"‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ JSON souboru: {str(e)}")
else:
    logging.error(f"‚ö†Ô∏è Chyba: Soubor {json_path} nebyl nalezen!")

# Seznam ot√°zek pro vyhled√°v√°n√≠
questions = [item["question"] for item in faq_data] if faq_data else []

# Testovac√≠ v√Ωpis prvn√≠ch 5 z√°znam≈Ø
logging.info("üîç Prvn√≠ch 5 ot√°zek v datab√°zi:")
for item in faq_data[:5]:
    logging.info(f"Q: {item['question']} -> A: {item['answer']}")

@app.on_event("startup")
def startup_event():
    logging.info("üåê Server bƒõ≈æ√≠...")

@app.get("/")
def root():
    return {"message": "Chatbot API bƒõ≈æ√≠! Pou≈æij endpoint /chatbot/?query=VA≈†E_OT√ÅZKA"}

@app.get("/chatbot/")
def chatbot(query: str):
    if not faq_data:
        logging.error("üö® Datab√°ze nen√≠ naƒçtena!")
        return {"answer": "Chyba: Datab√°ze nen√≠ naƒçtena."}

    # Logov√°n√≠ dotazu
    logging.info(f"üì• Dotaz od u≈æivatele: {query}")

    # Vyhled√°n√≠ nejlep≈°√≠ shody
    best_match = process.extractOne(query, questions, scorer=fuzz.ratio)

    if best_match:
        logging.info(f"‚úÖ Nejlep≈°√≠ shoda: {best_match[0]} (sk√≥re: {best_match[1]})")
    else:
        logging.info("‚ùå Nenalezena ≈æ√°dn√° shoda.")

    if best_match and best_match[1] > 76:  # Sn√≠≈æen√Ω pr√°h pro shodu
        index = questions.index(best_match[0])
        answer = faq_data[index]["answer"]
        logging.info(f"üì§ Vr√°cen√° odpovƒõƒè: {answer}")
        
        # Ulo≈æen√≠ dotazu a odpovƒõdi do Excelu
        save_to_excel(query, answer)
        
        return {"answer": answer}
    else:
        logging.info(f"‚ö†Ô∏è Dotaz '{query}' m√° sk√≥re {best_match[1] if best_match else 'N/A'} a nevrac√≠ odpovƒõƒè.")
        return {"answer": "Omlouv√°m se, ale na tuto ot√°zku nem√°m odpovƒõƒè."}

# Funkce pro ulo≈æen√≠ do Excelu
def save_to_excel(question, answer):
    excel_path = 'chatbot_data.xlsx'  # Cesta k va≈°emu Excel souboru
    
    try:
        # Zkontrolujte, zda soubor existuje
        if os.path.exists(excel_path):
            df = pd.read_excel(excel_path)
        else:
            # Pokud neexistuje, vytvo≈ôte nov√Ω DataFrame
            df = pd.DataFrame(columns=["Question", "Answer"])
        
        # P≈ôid√°n√≠ nov√©ho z√°znamu
        new_row = pd.DataFrame({"Question": [question], "Answer": [answer]})
        
        # Pou≈æijte concat() pro p≈ôid√°n√≠ nov√©ho ≈ô√°dku
        df = pd.concat([df, new_row], ignore_index=True)

        # Ulo≈æen√≠ DataFrame zpƒõt do Excelu
        df.to_excel(excel_path, index=False)
        logging.info(f"‚úÖ √öspƒõ≈°nƒõ ulo≈æeno do Excelu: {excel_path}")
    except Exception as e:
        logging.error(f"‚ùå Chyba p≈ôi ukl√°d√°n√≠ do Excelu: {str(e)}")
