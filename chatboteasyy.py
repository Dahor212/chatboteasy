from fastapi import FastAPI, HTTPException
from pydantic import BaseModel  # Importujeme BaseModel z Pydantic pro definici po≈æadavk≈Ø
import json
import os
import logging
import psycopg2
from fastapi.middleware.cors import CORSMiddleware
from datetime import datetime

app = FastAPI()

# T≈ô√≠da pro p≈ôijet√≠ hodnocen√≠
class RatingRequest(BaseModel):
    answer_id: int  # ID odpovƒõdi, kter√° byla hodnocena
    rating: str     # Hodnocen√≠ (up, down nebo none)

# Nastaven√≠ logov√°n√≠
logging.basicConfig(filename="logs.txt", level=logging.DEBUG, format="%(asctime)s - %(levelname)s - %(message)s")
logging.info("üöÄ Spu≈°tƒõn√≠ aplikace")

# Povolen√≠ CORS pro konkr√©tn√≠ dom√©ny
origins = [
    "http://dotazy.wz.cz",  # Povolit po≈æadavky z t√©to dom√©ny
    "https://dotazy.wz.cz",
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,  # Povolen√≠ specifikovan√Ωch dom√©n
    allow_credentials=True,
    allow_methods=["*"],  # Povolit v≈°echny HTTP metody
    allow_headers=["*"],  # Povolit v≈°echny hlaviƒçky
)

# Cesta k JSON souboru (pro Render)
json_path = "Chatbot_zdroj.json"
faq_data = []
if os.path.exists(json_path):
    try:
        with open(json_path, "r", encoding="utf-8") as f:
            faq_data = json.load(f)
        logging.info(f"‚úÖ Naƒçteno {len(faq_data)} z√°znam≈Ø z JSON souboru.")
    except Exception as e:
        logging.error(f"‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ JSON souboru: {str(e)}")
else:
    logging.error(f"‚ö†Ô∏è Chyba: Soubor {json_path} nebyl nalezen!")

questions = [item["question"] for item in faq_data] if faq_data else []

# P≈ôipojen√≠ k PostgreSQL datab√°zi
def connect_db():
    try:
        conn = psycopg2.connect(
            host=os.getenv('DB_HOST'),
            port=os.getenv('DB_PORT'),
            dbname=os.getenv('DB_NAME'),
            user=os.getenv('DB_USER'),
            password=os.getenv('DB_PASSWORD')
        )
        return conn
    except Exception as e:
        logging.error(f"‚ùå Chyba p≈ôi p≈ôipojen√≠ k datab√°zi: {e}")
        return None

# Vytvo≈ôen√≠ tabulky v PostgreSQL, pokud neexistuje
def create_table():
    conn = connect_db()
    if conn:
        try:
            cursor = conn.cursor()
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS chatbot_logs (
                    id SERIAL PRIMARY KEY,
                    question TEXT NOT NULL,
                    answer TEXT NOT NULL,
                    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    rating VARCHAR(10) DEFAULT 'none'  -- nov√Ω sloupec pro hodnocen√≠
                );
            ''')
            conn.commit()
            cursor.close()
            conn.close()
            logging.info("‚úÖ Tabulka byla √∫spƒõ≈°nƒõ vytvo≈ôena nebo upravena.")
        except Exception as e:
            logging.error(f"‚ùå Chyba p≈ôi vytv√°≈ôen√≠ tabulky: {e}")
            conn.close()

@app.on_event("startup")
def startup_event():
    logging.info("üåê Server bƒõ≈æ√≠...")
    create_table()

@app.get("/")
def root():
    return {"message": "Chatbot API bƒõ≈æ√≠! Pou≈æij endpoint /chatbot/?query=VA≈†E_OT√ÅZKA"}

@app.get("/chatbot/")
def chatbot(query: str):
    if not faq_data:
        logging.error("üö® Datab√°ze nen√≠ naƒçtena!")
        return {"answer": "Chyba: Datab√°ze nen√≠ naƒçtena."}

    # Logov√°n√≠ dotazu
    logging.info(f"üì• Dotaz od u≈æivatele: {query}")
    print(f"üì• Dotaz od u≈æivatele: {query}")  # Debugovac√≠ print

    # Vyhled√°n√≠ nejlep≈°√≠ shody
    best_match = process.extractOne(query, questions, scorer=fuzz.ratio)

    if best_match:
        logging.info(f"‚úÖ Nejlep≈°√≠ shoda: {best_match[0]} (sk√≥re: {best_match[1]})")
        print(f"‚úÖ Nejlep≈°√≠ shoda: {best_match[0]} (sk√≥re: {best_match[1]})")  # Debugovac√≠ print
    else:
        logging.info("‚ùå Nenalezena ≈æ√°dn√° shoda.")
        print("‚ùå Nenalezena ≈æ√°dn√° shoda.")  # Debugovac√≠ print

    if best_match and best_match[1] > 76:  # Sn√≠≈æen√Ω pr√°h pro shodu
        index = questions.index(best_match[0])
        answer = faq_data[index]["answer"]
        logging.info(f"üì§ Vr√°cen√° odpovƒõƒè: {answer}")
        print(f"üì§ Vr√°cen√° odpovƒõƒè: {answer}")  # Debugovac√≠ print
        
        # Ulo≈æen√≠ dotazu a odpovƒõdi do datab√°ze
        save_to_db(query, answer)
        
        return {"answer": answer}
    else:
        logging.info(f"‚ö†Ô∏è Dotaz '{query}' m√° sk√≥re {best_match[1] if best_match else 'N/A'} a nevrac√≠ odpovƒõƒè.")
        print(f"‚ö†Ô∏è Dotaz '{query}' m√° sk√≥re {best_match[1] if best_match else 'N/A'} a nevrac√≠ odpovƒõƒè.")  # Debugovac√≠ print
        save_to_db(query, "Omlouv√°m se, ale na tuto ot√°zku nem√°m odpovƒõƒè.")
        return {"answer": "Omlouv√°m se, ale na tuto ot√°zku nem√°m odpovƒõƒè."}

# Funkce pro ulo≈æen√≠ dotazu a odpovƒõdi do PostgreSQL
def save_to_db(question, answer, rating='none'):
    try:
        print(f"üì§ Ukl√°d√°m do datab√°ze: {question} -> {answer} | Hodnocen√≠: {rating}")  # Debugovac√≠ print
        conn = connect_db()
        if conn:
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO chatbot_logs (question, answer, rating)
                VALUES (%s, %s, %s)
            ''', (question, answer, rating))
            conn.commit()
            cursor.close()
            conn.close()
            logging.info(f"‚úÖ √öspƒõ≈°nƒõ ulo≈æeno do datab√°ze: {question} -> {answer}")
        else:
            logging.error("‚ùå Nelze se p≈ôipojit k datab√°zi.")
    except Exception as e:
        logging.error(f"‚ùå Chyba p≈ôi ukl√°d√°n√≠ do datab√°ze: {e}")
        print(f"‚ùå Chyba p≈ôi ukl√°d√°n√≠ do datab√°ze: {e}")  # Debugovac√≠ print

# Funkce pro aktualizaci hodnocen√≠ odpovƒõdi
@app.post("/rate_answer")
async def rate_answer(request: RatingRequest):
    try:
        # Logov√°n√≠ p≈ôijat√Ωch dat pro hodnocen√≠
        logging.info(f"üì• P≈ôijat√Ω po≈æadavek na hodnocen√≠: {request}")
        print(f"üì• P≈ôijat√Ω po≈æadavek na hodnocen√≠: {request}")  # Debugovac√≠ print

        # P≈ôipojen√≠ k datab√°zi
        conn = connect_db()
        if conn:
            cursor = conn.cursor()

            # Pokud hodnocen√≠ neexistuje, nastav√≠me jej
            cursor.execute('''
                UPDATE chatbot_logs
                SET rating = %s
                WHERE id = %s
            ''', (request.rating, request.answer_id))

            conn.commit()
            cursor.close()
            conn.close()

            logging.info(f"‚úÖ Hodnocen√≠ pro ID {request.answer_id} aktualizov√°no na {request.rating}.")
            print(f"‚úÖ Hodnocen√≠ pro ID {request.answer_id} aktualizov√°no na {request.rating}.")  # Debugovac√≠ print
            return {"success": True}
        else:
            logging.error("‚ùå Chyba p≈ôi p≈ôipojen√≠ k datab√°zi.")
            raise HTTPException(status_code=500, detail="Chyba p≈ôi p≈ôipojen√≠ k datab√°zi.")
    except Exception as e:
        logging.error(f"‚ùå Chyba p≈ôi ukl√°d√°n√≠ hodnocen√≠: {e}")
        print(f"‚ùå Chyba p≈ôi ukl√°d√°n√≠ hodnocen√≠: {e}")  # Debugovac√≠ print
        raise HTTPException(status_code=500, detail="Chyba p≈ôi ukl√°d√°n√≠ hodnocen√≠.")
