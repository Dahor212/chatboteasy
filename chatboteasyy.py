from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import os
import logging
import psycopg2
from datetime import datetime

app = FastAPI()

# Povolen√≠ CORS pro konkr√©tn√≠ dom√©ny
origins = [
    "http://dotazy.wz.cz",
    "https://dotazy.wz.cz",
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,  # Povolen√≠ specifikovan√Ωch dom√©n
    allow_credentials=True,
    allow_methods=["*"],  # Povolit v≈°echny HTTP metody
    allow_headers=["*"],  # Povolit v≈°echny hlaviƒçky
)

# T≈ô√≠da pro p≈ôijet√≠ hodnocen√≠
class RatingRequest(BaseModel):
    answer_id: int  # ID odpovƒõdi, kter√° byla hodnocena
    rating: str     # Hodnocen√≠ (up, down nebo none)

# Nastaven√≠ logov√°n√≠
logging.basicConfig(filename="logs.txt", level=logging.DEBUG, format="%(asctime)s - %(levelname)s - %(message)s")
logging.info("üöÄ Spu≈°tƒõn√≠ aplikace")

# P≈ôipojen√≠ k PostgreSQL datab√°zi
def connect_db():
    try:
        conn = psycopg2.connect(
            host=os.getenv('DB_HOST'),
            port=os.getenv('DB_PORT'),
            dbname=os.getenv('DB_NAME'),
            user=os.getenv('DB_USER'),
            password=os.getenv('DB_PASSWORD')
        )
        return conn
    except Exception as e:
        logging.error(f"‚ùå Chyba p≈ôi p≈ôipojen√≠ k datab√°zi: {e}")
        return None

# Vytvo≈ôen√≠ tabulky v PostgreSQL, pokud neexistuje
def create_table():
    conn = connect_db()
    if conn:
        try:
            cursor = conn.cursor()
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS chatbot_logs (
                    id SERIAL PRIMARY KEY,
                    question TEXT NOT NULL,
                    answer TEXT NOT NULL,
                    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    rating VARCHAR(10) DEFAULT 'none'  -- nov√Ω sloupec pro hodnocen√≠
                );
            ''')
            conn.commit()
            cursor.close()
            conn.close()
            logging.info("‚úÖ Tabulka byla √∫spƒõ≈°nƒõ vytvo≈ôena nebo upravena.")
        except Exception as e:
            logging.error(f"‚ùå Chyba p≈ôi vytv√°≈ôen√≠ tabulky: {e}")
            conn.close()

@app.on_event("startup")
def startup_event():
    logging.info("üåê Server bƒõ≈æ√≠...")
    create_table()

@app.get("/")
def root():
    return {"message": "Chatbot API bƒõ≈æ√≠! Pou≈æij endpoint /chatbot/?query=VA≈†E_OT√ÅZKA"}

@app.get("/chatbot/")
def chatbot(query: str):
    # Tento endpoint bude hledat odpovƒõƒè na z√°kladƒõ dotazu
    pass

# Funkce pro ulo≈æen√≠ dotazu a odpovƒõdi do PostgreSQL
def save_to_db(question, answer, rating='none'):
    try:
        conn = connect_db()
        if conn:
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO chatbot_logs (question, answer, rating)
                VALUES (%s, %s, %s)
            ''', (question, answer, rating))
            conn.commit()
            cursor.close()
            conn.close()
            logging.info(f"‚úÖ √öspƒõ≈°nƒõ ulo≈æeno do datab√°ze: {question} -> {answer}")
    except Exception as e:
        logging.error(f"‚ùå Chyba p≈ôi ukl√°d√°n√≠ do datab√°ze: {e}")

# Funkce pro aktualizaci hodnocen√≠ odpovƒõdi
@app.post("/rate_answer")
async def rate_answer(request: RatingRequest):
    try:
        # P≈ôipojen√≠ k datab√°zi
        conn = connect_db()
        if conn:
            cursor = conn.cursor()

            # Aktualizace ratingu pro dan√Ω z√°znam
            cursor.execute('''
                UPDATE chatbot_logs
                SET rating = %s
                WHERE id = %s
            ''', (request.rating, request.answer_id))

            conn.commit()
            cursor.close()
            conn.close()

            return {"success": True}
        else:
            raise HTTPException(status_code=500, detail="Chyba p≈ôi p≈ôipojen√≠ k datab√°zi.")
    except Exception as e:
        logging.error(f"‚ùå Chyba p≈ôi ukl√°d√°n√≠ hodnocen√≠: {e}")
        raise HTTPException(status_code=500, detail="Chyba p≈ôi ukl√°d√°n√≠ hodnocen√≠.")
