from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
import json
import os
import logging
import psycopg2
from fastapi.middleware.cors import CORSMiddleware
from rapidfuzz import process, fuzz
from datetime import datetime

app = FastAPI()

# T≈ô√≠da pro p≈ôijet√≠ hodnocen√≠
class RatingRequest(BaseModel):
    answer_id: int  # ID odpovƒõdi, kter√° byla hodnocena
    rating: str     # Hodnocen√≠ (up, down nebo none)

# Nastaven√≠ logov√°n√≠
logging.basicConfig(filename="logs.txt", level=logging.DEBUG, format="%(asctime)s - %(levelname)s - %(message)s")
logging.info("üöÄ Spu≈°tƒõn√≠ aplikace")

# Povolen√≠ CORS pro v≈°echny metody
origins = [
    "http://dotazy.wz.cz",  # Povolit po≈æadavky z HTTP dom√©ny
    "https://dotazy.wz.cz",  # Povolit po≈æadavky z HTTPS dom√©ny
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,  # Povolen√≠ specifikovan√Ωch dom√©n
    allow_credentials=True,
    allow_methods=["*"],  # Povolit v≈°echny HTTP metody
    allow_headers=["*"],  # Povolit v≈°echny hlaviƒçky
)

# P≈ôipojen√≠ k PostgreSQL datab√°zi
def connect_db():
    try:
        conn = psycopg2.connect(
            host=os.getenv('DB_HOST'),
            port=os.getenv('DB_PORT'),
            dbname=os.getenv('DB_NAME'),
            user=os.getenv('DB_USER'),
            password=os.getenv('DB_PASSWORD')
        )
        return conn
    except Exception as e:
        logging.error(f"‚ùå Chyba p≈ôi p≈ôipojen√≠ k datab√°zi: {e}")
        return None

# Vytvo≈ôen√≠ tabulky v PostgreSQL, pokud neexistuje
def create_table():
    conn = connect_db()
    if conn:
        try:
            cursor = conn.cursor()
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS chatbot_logs (
                    id SERIAL PRIMARY KEY,
                    question TEXT NOT NULL,
                    answer TEXT NOT NULL,
                    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    rating VARCHAR(10) DEFAULT 'none'  -- nov√Ω sloupec pro hodnocen√≠
                );
            ''')
            conn.commit()
            cursor.close()
            conn.close()
            logging.info("‚úÖ Tabulka byla √∫spƒõ≈°nƒõ vytvo≈ôena nebo upravena.")
        except Exception as e:
            logging.error(f"‚ùå Chyba p≈ôi vytv√°≈ôen√≠ tabulky: {e}")
            conn.close()

@app.on_event("startup")
def startup_event():
    logging.info("üåê Server bƒõ≈æ√≠...")
    create_table()

@app.get("/")
def root():
    return {"message": "Chatbot API bƒõ≈æ√≠! Pou≈æij endpoint /chatbot/?query=VA≈†E_OT√ÅZKA"}

@app.get("/chatbot/")
def chatbot(query: str):
    logging.info(f"üì• Dotaz od u≈æivatele: {query}")
    # Zde by mƒõla b√Ωt logika pro vyhled√°n√≠ odpovƒõdi v FAQ
    return {"answer": "Tato funkce je≈°tƒõ nen√≠ implementov√°na."}

@app.post("/rate_answer/")
async def rate_answer(request: RatingRequest):
    try:
        logging.info(f"üì• P≈ôijat√Ω po≈æadavek na hodnocen√≠: {request}")
        
        # P≈ôipojen√≠ k datab√°zi
        conn = connect_db()
        if conn:
            cursor = conn.cursor()
            
            # Kontrola, zda je hodnocen√≠ platn√©
            if request.rating not in ['up', 'down', 'none']:
                raise HTTPException(status_code=400, detail="Neplatn√© hodnocen√≠.")
            
            # Aktualizace hodnocen√≠ pro dan√Ω z√°znam
            cursor.execute('''
                UPDATE chatbot_logs
                SET rating = %s
                WHERE id = %s
            ''', (request.rating, request.answer_id))

            conn.commit()
            cursor.close()
            conn.close()

            logging.info(f"‚úÖ Hodnocen√≠ pro ID {request.answer_id} aktualizov√°no na {request.rating}.")
            return {"success": True}
        else:
            logging.error("‚ùå Nelze se p≈ôipojit k datab√°zi.")
            raise HTTPException(status_code=500, detail="Chyba p≈ôi p≈ôipojen√≠ k datab√°zi.")
    except Exception as e:
        logging.error(f"‚ùå Chyba p≈ôi ukl√°d√°n√≠ hodnocen√≠: {e}")
        raise HTTPException(status_code=500, detail="Chyba p≈ôi ukl√°d√°n√≠ hodnocen√≠.")
