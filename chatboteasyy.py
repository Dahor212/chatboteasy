from fastapi import FastAPI, HTTPException
from pydantic import BaseModel  # Importujeme BaseModel z Pydantic pro definici po≈æadavk≈Ø
import json
import os
import logging
import pandas as pd
from fastapi.middleware.cors import CORSMiddleware
from rapidfuzz import process, fuzz
from github import Github
from io import BytesIO, StringIO
import psycopg2
from datetime import datetime

app = FastAPI()

# T≈ô√≠da pro p≈ôijet√≠ hodnocen√≠
class RatingRequest(BaseModel):
    answer_id: int  # ID odpovƒõdi, kter√° byla hodnocena
    rating: str     # Hodnocen√≠ (up, down nebo none)

# Nastaven√≠ logov√°n√≠
logging.basicConfig(filename="logs.txt", level=logging.DEBUG, format="%(asctime)s - %(levelname)s - %(message)s")
logging.info("üöÄ Spu≈°tƒõn√≠ aplikace")

# Povolen√≠ CORS
origins = [
    "http://dotazy.wz.cz",
    "https://dotazy.wz.cz",
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,  # Povolen√≠ specifikovan√Ωch dom√©n
    allow_credentials=True,
    allow_methods=["*"],  # Povolit v≈°echny HTTP metody
    allow_headers=["*"],  # Povolit v≈°echny hlaviƒçky
)

# GitHub API token a repo informace (token naƒç√≠t√°me z environment√°ln√≠ promƒõnn√©)
GITHUB_TOKEN = os.getenv('GITHUB_TOKEN')  # GitHub token naƒçten√Ω z prost≈ôed√≠
REPO_NAME = 'Dahor212/chatboteasy'  # GitHub repozit√°≈ô
CSV_FILE_PATH = 'chat_data.csv'  # Cesta k souboru na GitHubu (bez URL, pouze cesta k souboru v repozit√°≈ôi)

# Nastaven√≠ p≈ôipojen√≠ k GitHubu
g = Github(GITHUB_TOKEN)
repo = g.get_repo(REPO_NAME)

# Logujeme p≈ôipojen√≠ k repozit√°≈ôi
logging.info(f"üì¶ P≈ôipojeno k repozit√°≈ôi: {REPO_NAME}")

# Cesta k JSON souboru (pro Render)
json_path = "Chatbot_zdroj.json"
faq_data = []
if os.path.exists(json_path):
    try:
        with open(json_path, "r", encoding="utf-8") as f:
            faq_data = json.load(f)
        logging.info(f"‚úÖ Naƒçteno {len(faq_data)} z√°znam≈Ø z JSON souboru.")
    except Exception as e:
        logging.error(f"‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ JSON souboru: {str(e)}")
else:
    logging.error(f"‚ö†Ô∏è Chyba: Soubor {json_path} nebyl nalezen!")

questions = [item["question"] for item in faq_data] if faq_data else []

# P≈ôipojen√≠ k PostgreSQL datab√°zi
def connect_db():
    try:
        conn = psycopg2.connect(
            host=os.getenv('DB_HOST'),
            port=os.getenv('DB_PORT'),
            dbname=os.getenv('DB_NAME'),
            user=os.getenv('DB_USER'),
            password=os.getenv('DB_PASSWORD')
        )
        return conn
    except Exception as e:
        logging.error(f"‚ùå Chyba p≈ôi p≈ôipojen√≠ k datab√°zi: {e}")
        return None

# Vytvo≈ôen√≠ tabulky v PostgreSQL, pokud neexistuje
def create_table():
    conn = connect_db()
    if conn:
        try:
            cursor = conn.cursor()
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS chatbot_logs (
                    id SERIAL PRIMARY KEY,
                    question TEXT NOT NULL,
                    answer TEXT NOT NULL,
                    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    rating VARCHAR(10) DEFAULT 'none'  -- nov√Ω sloupec pro hodnocen√≠
                );
            ''')
            conn.commit()
            cursor.close()
            conn.close()
            logging.info("‚úÖ Tabulka byla √∫spƒõ≈°nƒõ vytvo≈ôena nebo upravena.")
        except Exception as e:
            logging.error(f"‚ùå Chyba p≈ôi vytv√°≈ôen√≠ tabulky: {e}")
            conn.close()

@app.on_event("startup")
def startup_event():
    logging.info("üåê Server bƒõ≈æ√≠...")
    create_table()

@app.get("/")
def root():
    return {"message": "Chatbot API bƒõ≈æ√≠! Pou≈æij endpoint /chatbot/?query=VA≈†E_OT√ÅZKA"}

@app.get("/chatbot/")
def chatbot(query: str):
    if not faq_data:
        logging.error("üö® Datab√°ze nen√≠ naƒçtena!")
        return {"answer": "Chyba: Datab√°ze nen√≠ naƒçtena."}

    # Logov√°n√≠ dotazu
    logging.info(f"üì• Dotaz od u≈æivatele: {query}")

    # Vyhled√°n√≠ nejlep≈°√≠ shody
    best_match = process.extractOne(query, questions, scorer=fuzz.ratio)

    if best_match:
        logging.info(f"‚úÖ Nejlep≈°√≠ shoda: {best_match[0]} (sk√≥re: {best_match[1]})")
    else:
        logging.info("‚ùå Nenalezena ≈æ√°dn√° shoda.")

    if best_match and best_match[1] > 76:  # Sn√≠≈æen√Ω pr√°h pro shodu
        index = questions.index(best_match[0])
        answer = faq_data[index]["answer"]
        logging.info(f"üì§ Vr√°cen√° odpovƒõƒè: {answer}")
        
        # Ulo≈æen√≠ dotazu a odpovƒõdi do datab√°ze
        save_to_db(query, answer)
        
        return {"answer": answer}
    else:
        logging.info(f"‚ö†Ô∏è Dotaz '{query}' m√° sk√≥re {best_match[1] if best_match else 'N/A'} a nevrac√≠ odpovƒõƒè.")
        save_to_db(query, "Omlouv√°m se, ale na tuto ot√°zku nem√°m odpovƒõƒè.")
        return {"answer": "Omlouv√°m se, ale na tuto ot√°zku nem√°m odpovƒõƒè."}

# Funkce pro ulo≈æen√≠ dotazu a odpovƒõdi do PostgreSQL
def save_to_db(question, answer, rating='none'):
    try:
        conn = connect_db()
        if conn:
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO chatbot_logs (question, answer, rating)
                VALUES (%s, %s, %s)
            ''', (question, answer, rating))
            conn.commit()
            cursor.close()
            conn.close()
            logging.info(f"‚úÖ √öspƒõ≈°nƒõ ulo≈æeno do datab√°ze: {question} -> {answer}")
    except Exception as e:
        logging.error(f"‚ùå Chyba p≈ôi ukl√°d√°n√≠ do datab√°ze: {e}")

# Funkce pro aktualizaci hodnocen√≠ odpovƒõdi
@app.post("/rate_answer")
async def rate_answer(request: RatingRequest):
    try:
        logging.info(f"üì• P≈ôijat√Ω po≈æadavek na hodnocen√≠: {request}")
        # P≈ôipojen√≠ k datab√°zi
        conn = connect_db()
        if conn:
            cursor = conn.cursor()

            # Pokud hodnocen√≠ neexistuje, nastav√≠me jej
            cursor.execute('''
                UPDATE chatbot_logs
                SET rating = %s
                WHERE id = %s
            ''', (request.rating, request.answer_id))

            conn.commit()
            cursor.close()
            conn.close()

            return {"success": True}
        else:
            raise HTTPException(status_code=500, detail="Chyba p≈ôi p≈ôipojen√≠ k datab√°zi.")
    except Exception as e:
        logging.error(f"‚ùå Chyba p≈ôi ukl√°d√°n√≠ hodnocen√≠: {e}")
        raise HTTPException(status_code=500, detail="Chyba p≈ôi ukl√°d√°n√≠ hodnocen√≠.")
